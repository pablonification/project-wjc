// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // --- PERUBAHAN DI SINI ---
  // Secara eksplisit memberitahu Prisma untuk menempatkan client
  // di dalam direktori node_modules. Ini meningkatkan keandalan.
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

enum Role {
  ADMIN
  MEMBER
}

// --- INI BAGIAN PENTING ---
// Mendefinisikan model pertama kita: Whitelist.
// Setiap 'model' akan menjadi sebuah 'collection' di database MongoDB Anda.
model Whitelist {
  // 'id' adalah primary key.
  // @id menandakannya sebagai primary key.
  // @default(auto()) membuat MongoDB meng-generate ID unik secara otomatis.
  // @map("_id") memberitahu Prisma untuk menggunakan nama field `_id` di MongoDB, sesuai standar.
  // @db.ObjectId memberitahu Prisma bahwa tipe datanya adalah ObjectId khas MongoDB.
  id          String @id @default(auto()) @map("_id") @db.ObjectId

  // Field untuk menyimpan nomor telepon.
  // @unique memastikan tidak ada dua baris data yang memiliki nomor telepon yang sama.
  // Ini sangat penting untuk mencegah duplikasi.
  phoneNumber String @unique

  // Field untuk menyimpan kapan data ini dibuat.
  // @default(now()) akan otomatis mengisi field ini dengan waktu saat ini ketika data baru dibuat.
  createdAt   DateTime @default(now())
  user        User?
}

// OTP Sementara
model Otp {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  phoneNumber String
  token       String   // Akan menyimpan hash dari OTP + expiry
  expires     DateTime // Waktu kedaluwarsa OTP
  createdAt   DateTime @default(now())
}

// User
model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  nickname        String? // Nama Panggilan
  chapter         String? // Asal Chapter
  phoneNumber     String   @unique
  password        String   // Akan menyimpan password yang sudah di-hash
  ktpUrl          String? // URL Foto KTP
  ktpPublicId     String?
  role            Role     @default(MEMBER)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  whitelistId     String    @unique @db.ObjectId
  whitelist       Whitelist @relation(fields: [whitelistId], references: [id], onDelete: Cascade)
  
  addresses       Address[]
  orders          Order[]
  activityRegistrations ActivityRegistration[]
}

// Tambahan enum status untuk kegiatan
enum ActivityStatus {
  UPCOMING
  ONGOING
  COMPLETED
}

// Model Berita untuk menyimpan data berita
model Berita {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  slug      String   @unique
  category  String?
  content   String
  imageUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model Kegiatan untuk menyimpan data kegiatan / event
model Kegiatan {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String         @unique
  description String
  dateStart   DateTime
  dateEnd     DateTime?
  location    String
  status      ActivityStatus @default(UPCOMING)
  registrationFee Int? // Biaya pendaftaran dasar
  imageUrl    String?
  attachmentUrls String[]
  
  // Accommodation info
  accommodationName String?
  accommodationPriceSharing Int? // Price for sharing room
  accommodationPriceSingle Int?  // Price for single room
  
  // T-shirt pricing by size
  tshirtPriceS    Int?
  tshirtPriceM    Int?
  tshirtPriceL    Int?
  tshirtPriceXL   Int?
  tshirtPriceXXL  Int?
  tshirtPriceXXXL Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  
  // Relations
  registrations ActivityRegistration[]
}

// Model ActivityRegistration untuk menyimpan data pendaftaran kegiatan
model ActivityRegistration {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  
  // User info
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Activity info
  activityId String   @db.ObjectId
  activity   Kegiatan @relation(fields: [activityId], references: [id], onDelete: Cascade)
  
  // Registration details
  tshirtSize String   // S, M, L, XL, XXL, XXXL
  
  // Accommodation options
  needAccommodation Boolean  @default(false)
  roomType          String? // "sharing" or "single"
  
  // Pricing
  tshirtPrice       Int
  accommodationPrice Int     @default(0)
  totalPrice        Int
  
  // Payment info
  paymentStatus     PaymentStatus @default(PENDING)
  midtransToken     String?
  midtransRedirectUrl String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model Merchandise untuk menyimpan data produk
model Merchandise {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String   @unique
  price       Int
  description String?
  imageUrls   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relasi ke Order
  orders      Order[]
}

model Document {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  createdAt DateTime @default(now())
}

// Add Settings model for storing WhatsApp numbers
model Settings {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  key       String   @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Model Address untuk menyimpan alamat pelanggan
model Address {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  userId          String @db.ObjectId
  user            User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Data wajib
  namaLengkap     String
  alamatLengkap   String
  kodePos         String
  nomorTelepon    String
  email           String
  
  // Data opsional
  namaPenerima    String?
  nomorTeleponPenerima String?
  instruksiKhusus String?
  
  // Untuk integrasi RajaOngkir
  provinsi        String
  kota            String
  kecamatan       String
  kelurahan       String
  
  isDefault       Boolean @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relasi ke Order
  orders          Order[]
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPING
  COMPLETED
  CANCELLED
}

enum ShippingMethod {
  PICKUP      // Ambil di sekretariat
  DELIVERY    // Dikirim via ekspedisi
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  CANCELLED
}

// Model Order untuk menyimpan pesanan
model Order {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  user              User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  merchandiseId     String @db.ObjectId
  merchandise       Merchandise @relation(fields: [merchandiseId], references: [id])
  
  addressId         String? @db.ObjectId
  address           Address? @relation(fields: [addressId], references: [id])
  
  quantity          Int
  unitPrice         Int
  subtotal          Int
  shippingCost      Int @default(0)
  total             Int
  
  shippingMethod    ShippingMethod
  courierService    String? // JNE, TIKI, POS, dll
  
  status            OrderStatus @default(PENDING)
  
  // Midtrans payment data
  midtransToken     String?
  midtransRedirectUrl String?
  midtransStatus    String?

  // Tracking
  resi              String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Banner {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  page      String   // e.g., "kegiatan", "berita", "dokumentasi", "merchandise"
  enabled   Boolean  @default(false)
  imageUrl  String
  targetUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LandingPageContent {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  heroTitle          String
  heroDescription    String
  heroButton         String
  heroImageUrl       String?  // URL gambar hero
  heroImagePublicId  String?  // Public ID Cloudinary untuk hero
  tentangTitle       String
  tentangDescription String
  tentangButton      String
  tentangImageUrl    String?  // URL gambar tentang  
  tentangImagePublicId String? // Public ID Cloudinary untuk tentang
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}